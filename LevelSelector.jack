class LevelSelector {
    field GameLabels gameLabels;
    field Level level1;
    field Level level2;
    field Level level3;
    field Level level4;
    field int selected;

    constructor LevelSelector new(GameLabels _gameLabels) {
        let gameLabels = _gameLabels;
        let level1 = Level.new(120, 360, gameLabels.getEasy());
        let level2 = Level.new(100, 200, gameLabels.getNormal());
        let level3 = Level.new(80, 80, gameLabels.getHard());
        let level4 = Level.new(60, 60, gameLabels.getImpossible());
        let selected = 1;
        return this;
    }

    method Level select() {
        var char key;
        var Level level;
        do render(selected);
        while (true) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            if (key = 49) {
                let selected = 1;
                return level1;
            }
            if (key = 50) {
                let selected = 2;
                return level2;
            }
            if (key = 51) {
                let selected = 3;
                return level3;
            }
            if (key = 52) {
                let selected = 4;
                return level4;
            }
            if (key = 131) {
                let selected = moveSelector(selected, -1);
                do render(selected);
            }
            if (key = 87) {
                let selected = moveSelector(selected, -1);
                do render(selected);
            }
            if (key = 133) {
                let selected = moveSelector(selected, 1);
                do render(selected);
            }
            if (key = 83) {
                let selected = moveSelector(selected, 1);
                do render(selected);
            }
            if (key = 128) {
                if (selected = 1) {
                    return level1;
                }
                if (selected = 2) {
                    return level2;
                }
                if (selected = 3) {
                    return level3;
                }
                if (selected = 4) {
                    return level4;
                }
            }
            if (key = 32) {
                if (selected = 1) {
                    return level1;
                }
                if (selected = 2) {
                    return level2;
                }
                if (selected = 3) {
                    return level3;
                }
                if (selected = 4) {
                    return level4;
                }
            }
            while (key > 0) {
                let key = Keyboard.keyPressed();
            }
        }
        return null;
    }

    method int moveSelector(int selected, int direction) {
        var int sum;
        let sum = selected + direction;
        if (sum < 1) {
            let sum = 4;
        }
        if (sum > 4) {
            let sum = 1;
        }
        return sum;
    }

    method void render(int selected) {
        do Screen.clearScreen();
        do drawMenu(selected);
        return;
    }

    method void drawMenu(int selected) {
        do drawTitle(1099);
        do Output.moveCursor(6, 20);
        do Output.printString(gameLabels.getSelectLevel());
        do drawChoice(10, 23, gameLabels.getEasyMenu(), selected = 1, 3507);
        do drawChoice(12, 23, gameLabels.getNormalMenu(), selected = 2, 4211);
        do drawChoice(14, 23, gameLabels.getHardMenu(), selected = 3, 4915);
        do drawChoice(16, 23, gameLabels.getImpossibleMenu(), selected = 4, 5619);
        return;
    }

    method void drawChoice(int x, int y, string label, boolean selected, int location) {
        var int memAddress;
        do Output.moveCursor(x, y);
        do Output.printString(label);

        if (selected) {
            let memAddress = 16384 + location;
            do Memory.poke(memAddress + 0, 0);
            do Memory.poke(memAddress + 32, 0);
            do Memory.poke(memAddress + 64, 0);
            do Memory.poke(memAddress + 96, 224);
            do Memory.poke(memAddress + 128, 112);
            do Memory.poke(memAddress + 160, 56);
            do Memory.poke(memAddress + 192, 1020);
            do Memory.poke(memAddress + 224, 1020);
            do Memory.poke(memAddress + 256, 56);
            do Memory.poke(memAddress + 288, 112);
            do Memory.poke(memAddress + 320, 224);
            do Memory.poke(memAddress + 352, 0);
            do Memory.poke(memAddress + 384, 0);
            do Memory.poke(memAddress + 416, 0);
            do Memory.poke(memAddress + 448, 0);
            do Memory.poke(memAddress + 480, 0);
        }
        return;
    }

    method void drawTitle(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 4064);
        do Memory.poke(memAddress + 96, 4064);
        do Memory.poke(memAddress + 128, 1792);
        do Memory.poke(memAddress + 160, 1536);
        do Memory.poke(memAddress + 192, 1536);
        do Memory.poke(memAddress + 224, 1536);
        do Memory.poke(memAddress + 256, 1536);
        do Memory.poke(memAddress + 288, 1536);
        do Memory.poke(memAddress + 320, 1584);
        do Memory.poke(memAddress + 352, 1904);
        do Memory.poke(memAddress + 384, 2032);
        do Memory.poke(memAddress + 416, 992);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 384);
        do Memory.poke(memAddress + 96, 2016);
        do Memory.poke(memAddress + 128, 1632);
        do Memory.poke(memAddress + 160, 1632);
        do Memory.poke(memAddress + 192, 1632);
        do Memory.poke(memAddress + 224, 3696);
        do Memory.poke(memAddress + 256, 4080);
        do Memory.poke(memAddress + 288, 4080);
        do Memory.poke(memAddress + 320, 3120);
        do Memory.poke(memAddress + 352, 3120);
        do Memory.poke(memAddress + 384, 3120);
        do Memory.poke(memAddress + 416, 3120);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 4064);
        do Memory.poke(memAddress + 96, 4080);
        do Memory.poke(memAddress + 128, 3184);
        do Memory.poke(memAddress + 160, 48);
        do Memory.poke(memAddress + 192, 48);
        do Memory.poke(memAddress + 224, 48);
        do Memory.poke(memAddress + 256, 48);
        do Memory.poke(memAddress + 288, 48);
        do Memory.poke(memAddress + 320, 48);
        do Memory.poke(memAddress + 352, 3184);
        do Memory.poke(memAddress + 384, 4080);
        do Memory.poke(memAddress + 416, 4064);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 3120);
        do Memory.poke(memAddress + 96, 3632);
        do Memory.poke(memAddress + 128, 1840);
        do Memory.poke(memAddress + 160, 944);
        do Memory.poke(memAddress + 192, 496);
        do Memory.poke(memAddress + 224, 240);
        do Memory.poke(memAddress + 256, 240);
        do Memory.poke(memAddress + 288, 496);
        do Memory.poke(memAddress + 320, 944);
        do Memory.poke(memAddress + 352, 1840);
        do Memory.poke(memAddress + 384, 3632);
        do Memory.poke(memAddress + 416, 3120);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 1040);
        do Memory.poke(memAddress + 96, 3640);
        do Memory.poke(memAddress + 128, 3960);
        do Memory.poke(memAddress + 160, 4088);
        do Memory.poke(memAddress + 192, 4088);
        do Memory.poke(memAddress + 224, 3544);
        do Memory.poke(memAddress + 256, 3224);
        do Memory.poke(memAddress + 288, 3096);
        do Memory.poke(memAddress + 320, 3096);
        do Memory.poke(memAddress + 352, 3096);
        do Memory.poke(memAddress + 384, 3096);
        do Memory.poke(memAddress + 416, 3096);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 384);
        do Memory.poke(memAddress + 96, 2016);
        do Memory.poke(memAddress + 128, 1632);
        do Memory.poke(memAddress + 160, 1632);
        do Memory.poke(memAddress + 192, 1632);
        do Memory.poke(memAddress + 224, 3696);
        do Memory.poke(memAddress + 256, 4080);
        do Memory.poke(memAddress + 288, 4080);
        do Memory.poke(memAddress + 320, 3120);
        do Memory.poke(memAddress + 352, 3120);
        do Memory.poke(memAddress + 384, 3120);
        do Memory.poke(memAddress + 416, 3120);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 1040);
        do Memory.poke(memAddress + 96, 3096);
        do Memory.poke(memAddress + 128, 3128);
        do Memory.poke(memAddress + 160, 3192);
        do Memory.poke(memAddress + 192, 3320);
        do Memory.poke(memAddress + 224, 3576);
        do Memory.poke(memAddress + 256, 4056);
        do Memory.poke(memAddress + 288, 3992);
        do Memory.poke(memAddress + 320, 3864);
        do Memory.poke(memAddress + 352, 3608);
        do Memory.poke(memAddress + 384, 3096);
        do Memory.poke(memAddress + 416, 1040);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 2016);
        do Memory.poke(memAddress + 96, 960);
        do Memory.poke(memAddress + 128, 384);
        do Memory.poke(memAddress + 160, 384);
        do Memory.poke(memAddress + 192, 384);
        do Memory.poke(memAddress + 224, 384);
        do Memory.poke(memAddress + 256, 384);
        do Memory.poke(memAddress + 288, 384);
        do Memory.poke(memAddress + 320, 384);
        do Memory.poke(memAddress + 352, 384);
        do Memory.poke(memAddress + 384, 960);
        do Memory.poke(memAddress + 416, 2016);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let memAddress = memAddress + 1;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 384);
        do Memory.poke(memAddress + 96, 2016);
        do Memory.poke(memAddress + 128, 1632);
        do Memory.poke(memAddress + 160, 1632);
        do Memory.poke(memAddress + 192, 1632);
        do Memory.poke(memAddress + 224, 3696);
        do Memory.poke(memAddress + 256, 4080);
        do Memory.poke(memAddress + 288, 4080);
        do Memory.poke(memAddress + 320, 3120);
        do Memory.poke(memAddress + 352, 3120);
        do Memory.poke(memAddress + 384, 3120);
        do Memory.poke(memAddress + 416, 3120);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}